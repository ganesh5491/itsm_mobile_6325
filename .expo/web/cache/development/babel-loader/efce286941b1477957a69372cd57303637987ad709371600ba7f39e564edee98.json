{"ast":null,"code":"\"use strict\";\n\nimport { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useLinkBuilder, useLocale, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ModalPresentationContext } from \"../../utils/ModalPresentationContext.js\";\nimport { useKeyboardManager } from \"../../utils/useKeyboardManager.js\";\nimport { Card } from \"./Card.js\";\nimport { CardA11yWrapper } from \"./CardA11yWrapper.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst EPSILON = 0.1;\nfunction CardContainerInner({\n  interpolationIndex,\n  index,\n  active,\n  opening,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  preloaded,\n  renderHeader,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene\n}) {\n  const wrapperRef = React.useRef(null);\n  const {\n    direction\n  } = useLocale();\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n  const {\n    onPageChangeStart,\n    onPageChangeCancel,\n    onPageChangeConfirm\n  } = useKeyboardManager(React.useCallback(() => {\n    const {\n      options,\n      navigation\n    } = scene.descriptor;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor]));\n  const handleOpen = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, false);\n    onOpenRoute({\n      route\n    });\n  };\n  const handleClose = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, true);\n    onCloseRoute({\n      route\n    });\n  };\n  const handleGestureBegin = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeStart();\n    onGestureStart({\n      route\n    });\n  };\n  const handleGestureCanceled = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeCancel();\n    onGestureCancel({\n      route\n    });\n  };\n  const handleGestureEnd = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onGestureEnd({\n      route\n    });\n  };\n  const handleTransition = ({\n    closing,\n    gesture\n  }) => {\n    wrapperRef.current?.setInert(closing);\n    const {\n      route\n    } = scene.descriptor;\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n    onTransitionStart?.({\n      route\n    }, closing);\n  };\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  const {\n    colors\n  } = useTheme();\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(({\n      value\n    }) => {\n      wrapperRef.current?.setInert(value > EPSILON);\n    });\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [scene.progress.next]);\n  const {\n    presentation,\n    animation,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec\n  } = scene.descriptor.options;\n  const {\n    buildHref\n  } = useLinkBuilder();\n  const previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  let backTitle;\n  let href;\n  if (previousScene) {\n    const {\n      options,\n      route\n    } = previousScene.descriptor;\n    backTitle = getHeaderTitle(options, route.name);\n    href = buildHref(route.name, route.params);\n  }\n  const canGoBack = previousScene != null;\n  const headerBack = React.useMemo(() => {\n    if (canGoBack) {\n      return {\n        href,\n        title: backTitle\n      };\n    }\n    return undefined;\n  }, [canGoBack, backTitle, href]);\n  const animated = animation !== 'none';\n  return _jsx(CardA11yWrapper, {\n    ref: wrapperRef,\n    focused: focused,\n    active: active,\n    animated: animated,\n    isNextScreenTransparent: isNextScreenTransparent,\n    detachCurrentScreen: detachCurrentScreen,\n    children: _jsx(Card, {\n      animated: animated,\n      interpolationIndex: interpolationIndex,\n      gestureDirection: gestureDirection,\n      layout: layout,\n      insets: insets,\n      direction: direction,\n      gesture: gesture,\n      current: scene.progress.current,\n      next: scene.progress.next,\n      opening: opening,\n      closing: closing,\n      onOpen: handleOpen,\n      onClose: handleClose,\n      overlay: cardOverlay,\n      overlayEnabled: cardOverlayEnabled,\n      shadowEnabled: cardShadowEnabled,\n      onTransition: handleTransition,\n      onGestureBegin: handleGestureBegin,\n      onGestureCanceled: handleGestureCanceled,\n      onGestureEnd: handleGestureEnd,\n      gestureEnabled: index === 0 ? false : gestureEnabled,\n      gestureResponseDistance: gestureResponseDistance,\n      gestureVelocityImpact: gestureVelocityImpact,\n      transitionSpec: transitionSpec,\n      styleInterpolator: cardStyleInterpolator,\n      pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n      preloaded: preloaded,\n      containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n        marginTop: headerHeight\n      } : null,\n      contentStyle: [{\n        backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n      }, cardStyle],\n      children: _jsx(View, {\n        style: styles.container,\n        children: _jsxs(ModalPresentationContext.Provider, {\n          value: modal,\n          children: [headerMode !== 'float' ? renderHeader({\n            mode: 'screen',\n            layout,\n            scenes: [previousScene, scene],\n            getPreviousScene,\n            getFocusedRoute,\n            onContentHeightChange: onHeaderHeightChange,\n            style: styles.header\n          }) : null, _jsx(View, {\n            style: styles.scene,\n            children: _jsx(HeaderBackContext.Provider, {\n              value: headerBack,\n              children: _jsx(HeaderShownContext.Provider, {\n                value: isParentHeaderShown || headerShown !== false,\n                children: _jsx(HeaderHeightContext.Provider, {\n                  value: headerShown !== false ? headerHeight : parentHeaderHeight ?? 0,\n                  children: scene.descriptor.render()\n                })\n              })\n            })\n          })]\n        })\n      })\n    })\n  });\n}\nexport const CardContainer = React.memo(CardContainerInner);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  header: {\n    zIndex: 1\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getHeaderTitle","HeaderBackContext","HeaderHeightContext","HeaderShownContext","useLinkBuilder","useLocale","useTheme","React","StyleSheet","View","ModalPresentationContext","useKeyboardManager","Card","CardA11yWrapper","jsx","_jsx","jsxs","_jsxs","EPSILON","CardContainerInner","interpolationIndex","index","active","opening","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","preloaded","renderHeader","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","wrapperRef","useRef","direction","parentHeaderHeight","useContext","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","useCallback","options","navigation","descriptor","isFocused","keyboardHandlingEnabled","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","current","setInert","insets","top","right","bottom","left","colors","useEffect","listener","progress","next","addListener","value","removeListener","presentation","animation","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","buildHref","previousScene","backTitle","href","name","params","canGoBack","headerBack","useMemo","title","undefined","animated","ref","children","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","styles","container","Provider","mode","scenes","onContentHeightChange","header","render","CardContainer","memo","create","flex","zIndex"],"sources":["/home/runner/workspace/node_modules/@react-navigation/stack/src/views/Stack/CardContainer.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  HeaderBackContext,\n  HeaderHeightContext,\n  HeaderShownContext,\n} from '@react-navigation/elements';\nimport {\n  type Route,\n  useLinkBuilder,\n  useLocale,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport type { Layout, Scene } from '../../types';\nimport { ModalPresentationContext } from '../../utils/ModalPresentationContext';\nimport { useKeyboardManager } from '../../utils/useKeyboardManager';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { Card } from './Card';\nimport { CardA11yWrapper, type CardA11yWrapperRef } from './CardA11yWrapper';\n\ntype Props = {\n  interpolationIndex: number;\n  index: number;\n  active: boolean;\n  focused: boolean;\n  opening: boolean;\n  closing: boolean;\n  modal: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  preloaded: boolean;\n  scene: Scene;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  hasAbsoluteFloatHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainerInner({\n  interpolationIndex,\n  index,\n  active,\n  opening,\n  closing,\n  gesture,\n  focused,\n  modal,\n  getPreviousScene,\n  getFocusedRoute,\n  hasAbsoluteFloatHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  preloaded,\n  renderHeader,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n}: Props) {\n  const wrapperRef = React.useRef<CardA11yWrapperRef>(null);\n\n  const { direction } = useLocale();\n\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const { onPageChangeStart, onPageChangeCancel, onPageChangeConfirm } =\n    useKeyboardManager(\n      React.useCallback(() => {\n        const { options, navigation } = scene.descriptor;\n\n        return (\n          navigation.isFocused() && options.keyboardHandlingEnabled !== false\n        );\n      }, [scene.descriptor])\n    );\n\n  const handleOpen = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene.descriptor;\n\n    onTransitionEnd({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeStart();\n    onGestureStart({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene.descriptor;\n\n    onPageChangeCancel();\n    onGestureCancel({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene.descriptor;\n\n    onGestureEnd({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    wrapperRef.current?.setInert(closing);\n\n    const { route } = scene.descriptor;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  React.useEffect(() => {\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        wrapperRef.current?.setInert(value > EPSILON);\n      }\n    );\n\n    return () => {\n      if (listener) {\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [scene.progress.next]);\n\n  const {\n    presentation,\n    animation,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec,\n  } = scene.descriptor.options;\n\n  const { buildHref } = useLinkBuilder();\n  const previousScene = getPreviousScene({ route: scene.descriptor.route });\n\n  let backTitle: string | undefined;\n  let href: string | undefined;\n\n  if (previousScene) {\n    const { options, route } = previousScene.descriptor;\n\n    backTitle = getHeaderTitle(options, route.name);\n    href = buildHref(route.name, route.params);\n  }\n\n  const canGoBack = previousScene != null;\n  const headerBack = React.useMemo(() => {\n    if (canGoBack) {\n      return {\n        href,\n        title: backTitle,\n      };\n    }\n\n    return undefined;\n  }, [canGoBack, backTitle, href]);\n\n  const animated = animation !== 'none';\n\n  return (\n    <CardA11yWrapper\n      ref={wrapperRef}\n      focused={focused}\n      active={active}\n      animated={animated}\n      isNextScreenTransparent={isNextScreenTransparent}\n      detachCurrentScreen={detachCurrentScreen}\n    >\n      <Card\n        animated={animated}\n        interpolationIndex={interpolationIndex}\n        gestureDirection={gestureDirection}\n        layout={layout}\n        insets={insets}\n        direction={direction}\n        gesture={gesture}\n        current={scene.progress.current}\n        next={scene.progress.next}\n        opening={opening}\n        closing={closing}\n        onOpen={handleOpen}\n        onClose={handleClose}\n        overlay={cardOverlay}\n        overlayEnabled={cardOverlayEnabled}\n        shadowEnabled={cardShadowEnabled}\n        onTransition={handleTransition}\n        onGestureBegin={handleGestureBegin}\n        onGestureCanceled={handleGestureCanceled}\n        onGestureEnd={handleGestureEnd}\n        gestureEnabled={index === 0 ? false : gestureEnabled}\n        gestureResponseDistance={gestureResponseDistance}\n        gestureVelocityImpact={gestureVelocityImpact}\n        transitionSpec={transitionSpec}\n        styleInterpolator={cardStyleInterpolator}\n        pageOverflowEnabled={headerMode !== 'float' && presentation !== 'modal'}\n        preloaded={preloaded}\n        containerStyle={\n          hasAbsoluteFloatHeader && headerMode !== 'screen'\n            ? { marginTop: headerHeight }\n            : null\n        }\n        contentStyle={[\n          {\n            backgroundColor:\n              presentation === 'transparentModal'\n                ? 'transparent'\n                : colors.background,\n          },\n          cardStyle,\n        ]}\n      >\n        <View style={styles.container}>\n          <ModalPresentationContext.Provider value={modal}>\n            {headerMode !== 'float'\n              ? renderHeader({\n                  mode: 'screen',\n                  layout,\n                  scenes: [previousScene, scene],\n                  getPreviousScene,\n                  getFocusedRoute,\n                  onContentHeightChange: onHeaderHeightChange,\n                  style: styles.header,\n                })\n              : null}\n            <View style={styles.scene}>\n              <HeaderBackContext.Provider value={headerBack}>\n                <HeaderShownContext.Provider\n                  value={isParentHeaderShown || headerShown !== false}\n                >\n                  <HeaderHeightContext.Provider\n                    value={\n                      headerShown !== false\n                        ? headerHeight\n                        : (parentHeaderHeight ?? 0)\n                    }\n                  >\n                    {scene.descriptor.render()}\n                  </HeaderHeightContext.Provider>\n                </HeaderShownContext.Provider>\n              </HeaderBackContext.Provider>\n            </View>\n          </ModalPresentationContext.Provider>\n        </View>\n      </Card>\n    </CardA11yWrapper>\n  );\n}\n\nexport const CardContainer = React.memo(CardContainerInner);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    zIndex: 1,\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}