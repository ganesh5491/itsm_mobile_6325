{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const CardA11yWrapper = React.forwardRef(({\n  focused,\n  active,\n  animated,\n  isNextScreenTransparent,\n  detachCurrentScreen,\n  children\n}, ref) => {\n  const [inert, setInert] = React.useState(false);\n  React.useImperativeHandle(ref, () => ({\n    setInert\n  }), []);\n  const isHidden = !animated && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused;\n  return _jsx(View, {\n    \"aria-hidden\": !focused,\n    pointerEvents: (animated ? inert : !focused) ? 'none' : 'box-none',\n    style: [StyleSheet.absoluteFill, {\n      overflow: active ? undefined : 'hidden',\n      display: Platform.OS !== 'web' && isHidden ? 'none' : 'flex',\n      visibility: isHidden ? 'hidden' : 'visible'\n    }],\n    collapsable: false,\n    children: children\n  });\n});\nCardA11yWrapper.displayName = 'CardA11yWrapper';","map":{"version":3,"names":["React","Platform","StyleSheet","View","jsx","_jsx","CardA11yWrapper","forwardRef","focused","active","animated","isNextScreenTransparent","detachCurrentScreen","children","ref","inert","setInert","useState","useImperativeHandle","isHidden","pointerEvents","style","absoluteFill","overflow","undefined","display","OS","visibility","collapsable","displayName"],"sources":["/home/runner/workspace/node_modules/@react-navigation/stack/src/views/Stack/CardA11yWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\n\ntype Props = {\n  focused: boolean;\n  active: boolean;\n  animated: boolean;\n  isNextScreenTransparent: boolean;\n  detachCurrentScreen: boolean;\n  children: React.ReactNode;\n};\n\nexport type CardA11yWrapperRef = { setInert: (value: boolean) => void };\n\nexport const CardA11yWrapper = React.forwardRef(\n  (\n    {\n      focused,\n      active,\n      animated,\n      isNextScreenTransparent,\n      detachCurrentScreen,\n      children,\n    }: Props,\n    ref: React.Ref<CardA11yWrapperRef>\n  ) => {\n    // Manage this in separate component to avoid re-rendering card during gestures\n    // Otherwise the gesture animation will be interrupted as state hasn't updated yet\n    const [inert, setInert] = React.useState(false);\n\n    React.useImperativeHandle(ref, () => ({ setInert }), []);\n\n    const isHidden =\n      !animated &&\n      isNextScreenTransparent === false &&\n      detachCurrentScreen !== false &&\n      !focused;\n\n    return (\n      <View\n        aria-hidden={!focused}\n        pointerEvents={(animated ? inert : !focused) ? 'none' : 'box-none'}\n        style={[\n          StyleSheet.absoluteFill,\n          {\n            // This is necessary to avoid unfocused larger pages increasing scroll area\n            // The issue can be seen on the web when a smaller screen is pushed over a larger one\n            overflow: active ? undefined : 'hidden',\n            // We use visibility on web\n            display: Platform.OS !== 'web' && isHidden ? 'none' : 'flex',\n            // Hide unfocused screens when animation isn't enabled\n            // This is also necessary for a11y on web\n            // @ts-expect-error visibility is only available on web\n            visibility: isHidden ? 'hidden' : 'visible',\n          },\n        ]}\n        // Make sure this view is not removed on the new architecture, as it causes focus loss during navigation on Android.\n        // This can happen when the view flattening results in different trees - due to `overflow` style changing in a parent.\n        collapsable={false}\n      >\n        {children}\n      </View>\n    );\n  }\n);\n\nCardA11yWrapper.displayName = 'CardA11yWrapper';\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAC4B,SAAAC,GAAA,IAAAC,IAAA;AAa1D,OAAO,MAAMC,eAAe,GAAGN,KAAK,CAACO,UAAU,CAC7C,CACE;EACEC,OAAO;EACPC,MAAM;EACNC,QAAQ;EACRC,uBAAuB;EACvBC,mBAAmB;EACnBC;AACK,CAAC,EACRC,GAAkC,KAC/B;EAGH,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,KAAK,CAACiB,QAAQ,CAAC,KAAK,CAAC;EAE/CjB,KAAK,CAACkB,mBAAmB,CAACJ,GAAG,EAAE,OAAO;IAAEE;EAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EAExD,MAAMG,QAAQ,GACZ,CAACT,QAAQ,IACTC,uBAAuB,KAAK,KAAK,IACjCC,mBAAmB,KAAK,KAAK,IAC7B,CAACJ,OAAO;EAEV,OACEH,IAAA,CAACF,IAAI;IACH,eAAa,CAACK,OAAQ;IACtBY,aAAa,EAAE,CAACV,QAAQ,GAAGK,KAAK,GAAG,CAACP,OAAO,IAAI,MAAM,GAAG,UAAW;IACnEa,KAAK,EAAE,CACLnB,UAAU,CAACoB,YAAY,EACvB;MAGEC,QAAQ,EAAEd,MAAM,GAAGe,SAAS,GAAG,QAAQ;MAEvCC,OAAO,EAAExB,QAAQ,CAACyB,EAAE,KAAK,KAAK,IAAIP,QAAQ,GAAG,MAAM,GAAG,MAAM;MAI5DQ,UAAU,EAAER,QAAQ,GAAG,QAAQ,GAAG;IACpC,CAAC;IAIHS,WAAW,EAAE,KAAM;IAAAf,QAAA,EAElBA;EAAQ,CACL,CAAC;AAEX,CACF,CAAC;AAEDP,eAAe,CAACuB,WAAW,GAAG,iBAAiB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}